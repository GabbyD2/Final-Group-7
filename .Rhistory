x <- c(78.2, 91.3, 105.7, 79.4, 89.9, 93.2)
X.std <- x- mean(x))/ sd(x)
DF <- data.frame(levels(length(BUY$name))
DF
```
c.  Make a character vector called `bad.levels` that contains the offending level(s), then write a command that prints out the total number of values in the `name` column which are "bad"" and another command that prints out the fraction (0-1) of values in the `name` column which are bad.
```{r Q7c}
bad.levels <- c("404 - not found")
length(which(BUY$name %in% bad.levels))
mean(BUY$name %in% bad.levels)
```
d.  The `table` command produces a vector of integers that give the frequencies of all of its unique values.  Much like each column in a dataframe is given a name, each element in the vector output by `table` is given a name corresponding to the value that the frequency represents.   These names can be extracted as a character vector with the `names` command. Thus, develop a command that uses `which`, `table`, and `names` and that prints to the screen the names of the two products that appear exactly 281 times in the data.
```{r Q7d}
names(which(table(BUY$name)==281))
```
************************
8.  The `price` column is supposed to capture the price listed in the Buy Box (the `high` and `low` columns represent the highest and lowest prices offered by the "other sellers", the number of which are in the `sellers` column).  However, the software might bug out and fail to record it (couldn't parse the page or the page timed out).  Or, there might not be any price listed (it's discontinued or no longer offered at amazon), etc.
a.  Write a command that uses `length` and `which` that prints out the total number of `NA`s in this column.
```{r}
length(which(is.na(BUY$price)))
```
b.  Define `price.fixed` to be the vector of values contained in `BUY$price`.  Let's get rid of some problem values and perform a simple median-replacement ("guess" at what the missing values are by finding the median of the values we know about).  Specifically:
* Replace all values in `price.fixed` that are 100 or greater with `NA`  (remember what we said about NA and quotes!)
* Replace all `NA`s with the median of the values that do exist in `price.fixed`
* Provide a `summary` of `price.fixed`
```{r}
price.fixed <- BUY$price
price.fixed[which(price.fixed>=100)]<- NA
price.fixed[which(is.na(price.fixed))] <- median(price.fixed, na.rm = TRUE)
summary(price.fixed)
```
c.  There are column constraints in this dataset:
*  The value in `low` should be less than or equal to the value in `high`.  Violated then `low` is greater than `high`.
*  The value in `price` should be at least `low` and at most `high`.  Violated when `price` is less than `low` or `price` is greater than `high`. (Sanity check:  close to 0.15)
*  When `stock` is either "in" or "low", the value of `sellers` should not equal 0.  Violated when `stock` is either "in" or "low" and `sellers` equals 0.
Use the `mean` of a logical condition to determine the fraction (0-1) of rows which *violate* each constraint (do this for each bullet point separately; we aren't looking for the fraction that violate all three constraints simultaneously).  Since there are many missing values, you'll have to add a certain argument to `mean()` so that you get a number out instead of an `NA`.
```{r}
mean(BUY$low > BUY$high, na.rm = TRUE)
mean(BUY$price<BUY$low|BUY$price > BUY$high, na.rm = TRUE)
```
****************
9.  In business analytics, very often we analytics transformations of the raw data values that were collected in order to make algorithms work better.
a.  Imagine that a model is made that predicts the log10 of the closing prices of a set of stocks.  The numbers output from the model are 0, 0.032, 1.7, 3.66, and 4.2.
Print to the screen the "untransformed" values to which these predictions apply (i.e., what values, when the log10 is taken, give the five amounts).
```{r}
preds <- c(0, 0.032, 1.7, 3.66, 4.2)
10^(preds)
```
b.  Imagine that a model is made that predicts a transformation of checking account balances.  In the raw data, the minimum checking balance was -512 (since money was owed).  The model predicts the log10 of the balances after 513 has been added to each.
Print to the screen the "untransformed" values to which these predictions apply.
```{r}
preds <- c(0, 0.032, 1.7, 3.66, 4.2)
10^log10(-512+513)-513
```
c.  Some algorithms (e.g., clustering and nearest-neighbor algorithms) require variables to be "standardized", i.e. to have a mean of 0 and a standard deviation of 1.  Define `x.std` to be the standardized values of the following vector `x`.  Show that the mean of `x.std` is "zero" and the standard deviation of `x.std` is 1.  Print to the screen the contents of `x.std`.
```{r}
x <- c(78.2, 91.3, 105.7, 79.4, 89.9, 93.2)
X.std <- x- mean(x))/ sd(x)
X.std <- (x-mean(x))/ sd(x)
sd(X.std)
X.std
mean(X.std)
length(levels(BUY$name)
length(levels(BUY$name))
head(length(levels(BUY$name)))
head(levels(BUY$name)))
levels(length(BUY$name))
head(levels(length(BUY$name))
length(which(BUY$name))
length(which(BUY$name))
length(BUY$name))
length(BUY$name)
MOVIE$Movie[which(MOVIE$BoxOffice == max(MOVIE$BoxOffice))]
length(BUY$name)
head(BUY$name)
head(levels(BUY$name))
set.seed(471); sample(c(0,20),size = 1, replace = FALSE, prob = seq(from=20, to=0,length(21)))
set.seed(471); sample(c(0,20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, by=21)
set.seed(471); sample(c(0,20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, by=21)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob))
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:21),size = 1, replace = FALSE, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
sample(c(0:20), size=1, replace = FALSE, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(...)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=21), prob= .5)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
set.seed(471); sample(c(0:20),size = 21, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=21))
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0))
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=21)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=21)
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#11
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = seq(from=20,to=0,length=21))
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = seq(from=20,to=0))
## ----Example - nametag matching---------------------------------------------------------------------------------------------
set.seed(1116); tags <- sample(1:20,size=20,replace=FALSE)
## ----Logical conditions and the mean function-------------------------------------------------------------------------------
x <- c(1,3,5,6,3,8,10,15,3,2)
## ----Example - nametag matching---------------------------------------------------------------------------------------------
set.seed(1116); tags <- sample(1:20,size=20,replace=FALSE)
## ----Example - nametag matching---------------------------------------------------------------------------------------------
set.seed(1116); tags <- sample(1:20,size=20,replace=FALSE)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=20)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = seq(from=20,to=0))
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = seq(from=20,to=0))
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=20)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = )
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
sample(c(0:12,size=1, replace= FALSE, prob= .15)
set.seed(5845); sample(c(0:12,size=12, replace= FALSE, prob= .15)  #Results of each of 12 surveys
set.seed(5845); sample(c(0:12),size=12, replace= FALSE, prob= .15)  #Results of each of 12 surveys
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob )
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=20)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob )
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=20)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=21)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob= sample.prob)
set.seed(5845); sample(c(0:1),size=12, replace= TRUE, prob= c(.85,.15)  #Results of each of 12 surveys
set.seed(5845); sample(c(0:1),size=12, replace= TRUE, prob= c(.85,.15))  #Results of each of 12 surveys
set.seed(5845); sample(c(0:1),size=12, replace= TRUE, prob= c(85,15))  #Results of each of 12 surveys
set.seed(925); sample(c(0:1),size=12, replace= TRUE, prob= c(85,15))  #Results of each of 12 surveys
set.seed(140); sum( sample(c(0:1),size=12, replace= TRUE, prob= c(85,15)) )  #Total surveys completed
# 5
set.seed(5032); sum( sample(c(0:1),size=12, replace= TRUE, prob= c(85,15)) )  #Total surveys completed
ntrials <- 1e5
counter <- 0
for (series in 1:ntrials) {
games <- sample( c(1,0), size=7, replace=TRUE, prob=c(0.65,0.35))
if(sum(games)>=4) { counter <- counter + 1 }
}
counter/ntrials
num.completed <- rep(0,500)
person <- c(0:500)
#Uncomment the 2 lines of code show that you pass the sanity checks!
#head(num.completed)
#[1] 1 5 2 1 1 2
#tail(num.completed)
#[1] 2 2 1 4 1 1
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=2,to=0, length=21)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(42069)
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
(sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(42069)
(sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(42069)
(sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob= sample.prob)
#11
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob= sample.prob)
#11
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=2,to=0, length=21))
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=2,to=0, length=21))
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob= sample.prob)
#11
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=2,to=1, length=21))
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob= sample.prob)
#11
num.completed <- rep(0,500)
person <- c(0:500)
open.spots <- sample(c(0:500), size = 10, replace = FALSE)
#Uncomment the following 3 lines, replacing sample(...) with your sample command, to show you pass the sanity check.
set.seed(2021); open.spots <- sample(c(0:500), size = 10, replace = FALSE)
#Uncomment the following 3 lines, replacing sample(...) with your sample command, to show you pass the sanity check.
set.seed(2021); open.spots <- sample(c(0:500), size = num.spots, replace = FALSE)
num.spots <- 10
#Uncomment the following 3 lines, replacing sample(...) with your sample command, to show you pass the sanity check.
set.seed(2021); open.spots <- sample(c(0:500), size = num.spots, replace = FALSE)
set.seed(2021); open.spots <- sample(c(0:500), size = num.spots, replace = FALSE)
open.spots <- sort(open.spots)
open.spots
num.spots <- 10
open.spots <- sample(c(0:500), size = 10, replace = FALSE)
#Uncomment the following 3 lines, replacing sample(...) with your sample command, to show you pass the sanity check.
set.seed(2021); open.spots <- sample(c(0:500), size = num.spots, replace = FALSE)
open.spots <- sort(open.spots)
open.spots
#[1]  70 166 192 231 251 391 396 422 430 442   #No spots next to each other; we can't park!
num.spots <- 20
#Uncomment the following 3 lines, replacing sample(...) with your sample command, to show you pass the sanity check.
set.seed(9112); open.spots <- sample(c(0:500), size = 10, replace = FALSE)
open.spots <- sort(open.spots)
open.spots
#[1]  11  26  30 122 204 212 225 262 289 322 323 331 346 419 450 475 482 489 490 494  #Ooooo spots 489 and 490 open; we can park!
#Leave this as-is.
knitr::opts_chunk$set(echo = TRUE,collapse=TRUE)
if( as.numeric( paste( unlist( strsplit( paste(R.Version()$major,R.Version()$minor,sep="."),split="\\.") ),collapse="") ) < 411 ) {
stop("You must have R version 4.1.1 or later to knit this document")}
RNGversion("4.1.1")
ntrials <- 500000
n.correct <- rep(0,ntrials)
sample(ntrials, size = 20, replace = TRUE, prob = n.correct)
sample(ntrials, size = 20, replace = FALSE, prob = n.correct)
sample(c(1:20), size = ntrials, replace = FALSE, prob = n.correct)
mean(sample(c(1:20), size = ntrials, replace = FALSE, prob = n.correct))
mean(sample(ntrials, size = 20, replace = FALSE, prob = n.correct))
mean(sample(ntrials, size = 20, replace = FALSE))
mean(sample(n.correct, size = 20, replace = FALSE))
ntrials <- 500000
n.correct <- rep(0,ntrials)
for (i in 1:ntrials) {
picked <- sample(c(0:20), size = 20, replace = TRUE, prob = NULL)
n.correct <- sum(picked)
}
mean(n.correct)
ntrials <- 500000
n.correct <- rep(0,ntrials)
for (i in 1:ntrials) {
picked <- sample(c(0:100), size = 20, replace = TRUE, prob = NULL)
n.correct <- sum(picked)
}
mean(n.correct)
counter <- 0
ntrials <- 500000
n.correct <- rep(0,ntrials)
counter <- 0
for (i in 1:ntrials) {
n.correct <- sample(c(0:100), size = 20, replace = TRUE, prob = NULL)
counter + sum(n.correct)
}
mean(n.correct)
ntrials <- 500000
n.correct <- rep(0,ntrials)
counter <- 0
for (i in 1:ntrials) {
n.correct <- sample(c(0:100), size = 20, replace = TRUE, prob = NULL)
(counter + sum(n.correct))/20
}
mean(n.correct)
ntrials <- 500000
n.correct <- rep(0,ntrials)
counter <- 0
for (i in 1:ntrials) {
n.correct[i] <- sample(c(0:100), size = 20, replace = FALSE, prob = NULL)
(counter + sum(n.correct))/20
}
ntrials <- 500000
n.correct <- rep(0,ntrials)
counter <- 0
for (i in 1:ntrials) {
n.correct[i] <- sample(c(0:100), size = 20, replace = FALSE, prob = NULL)
total <- (counter + sum(n.correct))/20
}
ntrials <- 500000
n.correct <- rep(0,ntrials)
ntrials
counter <- 0
ntrials <- 500000
n.correct <- rep(0,ntrials)
counter <- 0
for (i in 1:ntrials) {
n.correct[i] <- sample(c(1:100), size = 20, replace = FALSE, prob = NULL)
total <- (counter + sum(n.correct))/20
}
pA <- 3/8 #calculate proportions of each class
pB <- 5/8
g <- 1- pA^2 - pB^2 #Gini
g
pA <- 2/3; pB <- 1/3 #calculate proportions and Gini index of "left" partition
g1 <- 1- pA^2 - pB^2
pA <- 1/5; pB <- 4/5 #calculate proportions and Gini index of "right" partition
g2 <- 1- pA^2 - pB^2
w1 <- 3/8; w2 <- 5/8
g.rating <- w1*g1 + w2*g2 #Gini of split is weighted sum of gini inidices of resulting partitions
g.rating
g-g.rating #reduction in Gini
#Splitting Male vs. Female
pA <- 2/4; pB <- 2/4 #calculate proportions and Gini index of Male partition
g1 <- 1- pA^2 - pB^2
pA <- 1/4; pB <- 3/4 #calculate proportions and Gini index of Female partition
g2 <- 1- pA^2 - pB^2
w1 <- 4/8; w2 <- 4/8
g.gender <- w1*g1 + w2*g2 #Gini of split is weighted sum of gini inidices of resulting partitions
g.gender
g-g.gender #reduction in Gini
fitControl <- trainControl(method="cv",number=5,classProbs=TRUE)
data(CHURN)
library(regclass)
library(regclass); data(CHURN)
fitControl <- trainControl(method="cv",number=5,classProbs=TRUE)
library(regclass); data(CHURN)
fitControl <- trainControl(method="cv",number=5,classProbs=TRUE)
#Leave this as-is.
knitr::opts_chunk$set(echo = TRUE,collapse=TRUE)
if( as.numeric( paste( unlist( strsplit( paste(R.Version()$major,R.Version()$minor,sep="."),split="\\.") ),collapse="") ) < 411 ) {
stop("You must have R version 4.1.1 or later to knit this document")}
RNGversion("4.1.1")
library(regclass)
data("CUSTLOYALTY")
library(regclass)
data("CUSTLOYALTY")
table(CUSTLOYALTY$Married)
hist(CUSTLOYALTY$FirstPurchase)
correct <- sample(1:10)  #Correct sequence picked at random
correct
subject <- sample(1:10)  #Sequence chosen by subject when Ho is true (subject randomly guessing)
subject
correct==subject
sum(correct==subject) #number of correct guesses!
94000*94000
-310000000+(94000*94000)
-310000000+(94000*4001)
(-310000000+(94000*4001))-(94000*1)
(-310000000+(94000*4001))-(94000*4000)
(-310000000+(94000*4001))-(-310000000+(94000*4000)
(-310000000+(94000*4001))-(-310000000+(94000*4000)
(-310000000+(94000*4001))-(-310000000+(94000*4000)
(-310000000+(94000*4001))-(-310000000+(94000*4000))
54-67
79-54
70-54
9-16
54-67
13/5
16/7
53-67
14/5
97+47
library(fpp3)
credit <- read.csv('credit (1).csv')
credit$year_month <- credit$ï..year_month
credit$ï..year_month <- NULL
credit$year_month <- yearmonth(credit$year_month)
setwd("~/TR-BAS 475/GitHub/Final-Group-7")
credit <- read.csv('credit (1).csv')
credit$year_month <- credit$ï..year_month
credit$ï..year_month <- NULL
credit$year_month <- yearmonth(credit$year_month)
credit <- as_tsibble(credit, index = year_month)
autoplot(credit, credit_in_millions)
gg_season(credit, credit_in_millions)
gg_subseries(credit, credit_in_millions)
gg_lag(credit, credit_in_millions, geom = "point")
credit %>% features(credit_in_millions, feat_acf)
train <- head(credit, nrow(credit) - 12)
test <- tail(credit, 12)
train %>%
stretch_tsibble(.init = 24, .step = 20) %>%
model(
arima = ARIMA(credit_in_millions),
ets = ETS(credit_in_millions),
nnet = NNETAR(credit_in_millions),
tslm = TSLM(credit_in_millions ~ trend()),
tslmseason = TSLM(credit_in_millions ~ trend() + season()),
seasonal_naive = SNAIVE(credit_in_millions ~ lag("month") + drift())
)
fit %>%
forecast(h = 12, times = 200) %>%
accuracy(train) %>%
arrange(RMSE)
fit <- train %>%
stretch_tsibble(.init = 24, .step = 20) %>%
model(
arima = ARIMA(credit_in_millions),
ets = ETS(credit_in_millions),
nnet = NNETAR(credit_in_millions),
tslm = TSLM(credit_in_millions ~ trend()),
tslmseason = TSLM(credit_in_millions ~ trend() + season()),
seasonal_naive = SNAIVE(credit_in_millions ~ lag("month") + drift())
)
fit %>%
forecast(h = 12, times = 200) %>%
accuracy(train) %>%
arrange(RMSE)
fit %>%
forecast(test, times = 100) %>%
autoplot(test)
fit %>%
forecast(test, times = 100) %>%
autoplot(credit)
fit <- train %>%
model(ARIMA(credit_in_millions))
report(fit)
gg_tsresiduals(fit)
fit %>%
forecast(test, times = 100) %>%
autoplot(test)
fit %>%
forecast(test, times = 100) %>%
autoplot(credit)
predictions <- fit %>%
forecast(test, times = 100)
y_pred <- predictions$.mean
rmse <- function(y_actual, y_pred) {
sqrt(mean((y_actual - y_pred)^2))
}
mape <- function(y_actual, y_pred) {
mean(abs(y_actual - y_pred) / y_actual)
}
rmse(y_pred, test$credit_in_millions)
mape(y_pred, test$credit_in_millions)
write.csv(predictions, "predictions.csv")
